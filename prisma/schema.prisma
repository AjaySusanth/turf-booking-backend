generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PLAYER
  TURF_OWNER
  ADMIN
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique @db.VarChar(255)
  name          String         
  phone         String?        @unique @db.VarChar(20)
  passwordHash  String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  sessions      UserSession[]
  ownerProfile  OwnerProfile?
  @@map("user")
}

model UserSession {
  id               String   @id @default(uuid())
  userId           String   @unique
  refreshTokenHash String   @unique
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])

  @@map("userSession")
}

model OwnerProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  businessName  String    @db.VarChar(255)
  address       String?
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ownerProfile")
}

model EventOutbox {
  id           String   @id @default(uuid())
  type         String   @db.VarChar(255)
  payload      Json
  createdAt    DateTime @default(now())
  processedAt  DateTime?
  status       String   @default("PENDING") // PENDING, SENT, FAILED
  attempts     Int      @default(0)

  @@map("eventOutbox")
  @@index([status, createdAt])
}