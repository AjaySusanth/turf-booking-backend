generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PLAYER
  TURF_OWNER
  ADMIN
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique @db.VarChar(255)
  name          String         
  phone         String?        @unique @db.VarChar(20)
  passwordHash  String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  sessions      UserSession[]
  ownerProfile  OwnerProfile?
  @@map("user")
}

model UserSession {
  id               String   @id @default(uuid())
  userId           String   @unique
  refreshTokenHash String   @unique
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])

  @@map("userSession")
}

model OwnerProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  businessName  String    @db.VarChar(255)
  address       String?
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  turfs        Turf[] 

  @@map("ownerProfile")
}

model EventOutbox {
  id           String   @id @default(uuid())
  type         String   @db.VarChar(255)
  payload      Json
  createdAt    DateTime @default(now())
  processedAt  DateTime?
  status       String   @default("PENDING") // PENDING, SENT, FAILED
  attempts     Int      @default(0)

  @@map("eventOutbox")
  @@index([status, createdAt])
}

model Turf {
  id          String       @id @default(uuid())
  name        String
  description String?
  location    String
  address     String
  city        String
  state       String
  pincode     String
  latitude    Float?
  longitude   Float?
  turfSports  TurfSport[]
  isActive    Boolean      @default(true)
  contactNumber String?    @db.VarChar(20)


  ownerId     String
  owner       OwnerProfile @relation(fields: [ownerId], references: [id])

  media      Media[]      @relation("TurfMedia")

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([ownerId])
  @@index([city])
  @@index([isActive])
}

model TurfSport {
  id       String   @id @default(uuid())
  turfId   String
  sport    Sport
  turf     Turf     @relation(fields: [turfId], references: [id],onDelete: Cascade)
}

model Media {
  id          String       @id @default(uuid())
  entityType  String       // e.g. "TURF", "PLAYER", "TOURNAMENT"
  entityId    String       // UUID of related entity (Turf.id, Player.id, etc.)
  mediaType   MediaType    @default(IMAGE)
  url         String       // Cloudflare/Cloudinary delivery URL
  publicId    String       // Public ID from Cloud provider
  isPrimary   Boolean      @default(false)
  format      String?      // jpg, png, webp, mp4, etc.
  size        Int?
  status      UploadStatus @default(PENDING)
  sortOrder   Int?         // For gallery ordering
  altText     String?      // Accessibility / SEO
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  // Optional relation back to Turf for convenience
  turf        Turf?        @relation("TurfMedia", fields: [entityId], references: [id])

  @@index([entityType, entityId])
  @@index([entityId, isPrimary])
  @@map("media")
}

enum Sport {
  FOOTBALL
  CRICKET
  BADMINTON
  BASKETBALL
  TENNIS
}
enum MediaType {
  IMAGE
  VIDEO
}

enum UploadStatus {
  PENDING
  UPLOADED
  FAILED
  DELETED
}
